---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: eks-cluster-crossplane
  title: Kubernetes Cluster with Crossplane
  description: Create a new Kubernetes cluster using Crossplane
  tags:
    - kubernetes
    - crossplane
    - infrastructure
spec:
  owner: platform-team
  type: infrastructure
  parameters:
    - title: Cluster Configuration
      required:
        - name
        - environment
        - clusterType
      properties:
        name:
          title: Cluster Name
          type: string
          pattern: '^[a-z0-9-]+$'
          description: Name for your cluster (lowercase, numbers, hyphens only)
        environment:
          title: Environment
          type: string
          enum:
            - dev
            - staging
            - prod
          description: Target environment for the cluster
        clusterType:
          title: Cluster Type
          type: string
          enum:
            - eks
          description: Kubernetes platform type
        clusterVariant:
          title: Cluster Variant
          type: string
          enum:
            - standard
            - gpu-enabled
            - cost-optimized
            - high-availability
          default: standard
          description: Type of cluster configuration to deploy

    - title: AWS Configuration
      properties:
        region:
          title: AWS Region
          type: string
          default: us-east-2
          enum:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - eu-west-1
            - eu-central-1
        awsAccountId:
          title: AWS Account ID
          type: string
          description: AWS Account ID for IAM ARN construction
          default: "635314249418"
          pattern: "^[0-9]{12}$"

    - title: Node Group Configuration
      properties:
        nodeCount:
          title: Desired Node Count
          type: integer
          default: 1
          minimum: 1
          maximum: 10
          description: Initial number of nodes in the node group
        nodeMinSize:
          title: Minimum Node Count
          type: integer
          default: 1
          minimum: 1
          maximum: 10
          description: Minimum number of nodes for auto-scaling
        nodeMaxSize:
          title: Maximum Node Count
          type: integer
          default: 3
          minimum: 1
          maximum: 20
          description: Maximum number of nodes for auto-scaling
        nodeSize:
          title: Node Instance Type
          type: string
          default: t3.medium
          enum:
            - t3.small
            - t3.medium
            - t3.large
            - t3.xlarge
            - m5.large
            - m5.xlarge
            - m5.2xlarge
            - c5.large
            - c5.xlarge
            - c5.2xlarge
          description: EC2 instance type for worker nodes
        capacityType:
          title: Node Capacity Type
          type: string
          enum:
            - ON_DEMAND
            - SPOT
          default: ON_DEMAND
          description: Capacity type for nodes (On-Demand or Spot instances)
        diskSize:
          title: Node Disk Size (GB)
          type: integer
          default: 20
          minimum: 20
          maximum: 100
          description: EBS volume size for each node

    - title: Cluster Access Configuration
      properties:
        endpointPrivateAccess:
          title: Enable Private Endpoint Access
          type: boolean
          default: false
          description: Enable private API server endpoint
        endpointPublicAccess:
          title: Enable Public Endpoint Access
          type: boolean
          default: true
          description: Enable public API server endpoint

    - title: Admin Access Configuration
      description: Configure IAM principals that will have admin access to the EKS cluster
      properties:
        adminAccessEntryName1:
          title: Primary Admin Principal Name
          type: string
          description: "Name of IAM user or role (e.g., 'MyAdminRole' or 'john.doe')"
          default: chicken
        adminAccessEntryType1:
          title: Primary Admin Principal Type
          type: string
          enum:
            - role
            - user
          default: user
        adminAccessEntryName2:
          title: Secondary Admin Principal Name (Optional)
          type: string
          description: "Name of additional IAM user or role for admin access"
        adminAccessEntryType2:
          title: Secondary Admin Principal Type
          type: string
          enum:
            - role
            - user
          default: role

    - title: Developer Access Configuration
      description: Configure IAM principals that will have namespace-scoped developer access
      properties:
        developerAccessEntryName1:
          title: Primary Developer Principal Name (Optional)
          type: string
          description: "Name of IAM user or role for developer access"
        developerAccessEntryType1:
          title: Primary Developer Principal Type
          type: string
          enum:
            - role
            - user
          default: role
        developerAccessEntryName2:
          title: Secondary Developer Principal Name (Optional)
          type: string
          description: "Name of additional IAM user or role for developer access"
        developerAccessEntryType2:
          title: Secondary Developer Principal Type
          type: string
          enum:
            - role
            - user
          default: role
          
    - title: Read-Only Access Configuration
      description: Configure IAM principals that will have read-only access to the EKS cluster
      properties:
        readOnlyAccessEntryName1:
          title: Primary Read-Only Principal Name (Optional)
          type: string
          description: "Name of IAM user or role for read-only access"
        readOnlyAccessEntryType1:
          title: Primary Read-Only Principal Type
          type: string
          enum:
            - role
            - user
          default: role
        readOnlyAccessEntryName2:
          title: Secondary Read-Only Principal Name (Optional)
          type: string
          description: "Name of additional IAM user or role for read-only access"
        readOnlyAccessEntryType2:
          title: Secondary Read-Only Principal Type
          type: string
          enum:
            - role
            - user
          default: role

  steps:
    - id: fetch-cluster-template
      name: Fetch Cluster Template
      action: fetch:template
      input:
        url: ./templates/${{ parameters.clusterVariant }}
        values:
          # Core configuration
          name: ${{ parameters.name }}
          environment: ${{ parameters.environment }}
          clusterType: ${{ parameters.clusterType }}
          clusterVariant: ${{ parameters.clusterVariant }}
          region: ${{ parameters.region }}
          awsAccountId: ${{ parameters.awsAccountId }}
          
          # Node configuration
          nodeCount: ${{ parameters.nodeCount }}
          nodeMinSize: ${{ parameters.nodeMinSize }}
          nodeMaxSize: ${{ parameters.nodeMaxSize }}
          nodeSize: ${{ parameters.nodeSize }}
          capacityType: ${{ parameters.capacityType }}
          diskSize: ${{ parameters.diskSize }}
          
          # Endpoint configuration
          endpointPrivateAccess: ${{ parameters.endpointPrivateAccess }}
          endpointPublicAccess: ${{ parameters.endpointPublicAccess }}
          
          # Access configuration
          adminAccessEntryName1: ${{ parameters.adminAccessEntryName1 }}
          adminAccessEntryType1: ${{ parameters.adminAccessEntryType1 }}
          adminAccessEntryName2: ${{ parameters.adminAccessEntryName2 }}
          adminAccessEntryType2: ${{ parameters.adminAccessEntryType2 }}
          developerAccessEntryName1: ${{ parameters.developerAccessEntryName1 }}
          developerAccessEntryType1: ${{ parameters.developerAccessEntryType1 }}
          developerAccessEntryName2: ${{ parameters.developerAccessEntryName2 }}
          developerAccessEntryType2: ${{ parameters.developerAccessEntryType2 }}
          readOnlyAccessEntryName1: ${{ parameters.readOnlyAccessEntryName1 }}
          readOnlyAccessEntryType1: ${{ parameters.readOnlyAccessEntryType1 }}
          readOnlyAccessEntryName2: ${{ parameters.readOnlyAccessEntryName2 }}
          readOnlyAccessEntryType2: ${{ parameters.readOnlyAccessEntryType2 }}

    - id: publish-pr
      name: Create Pull Request
      action: publish:github:pull-request
      input:
        repoUrl: github.com?owner=SkylarHoughtonGithub&repo=skylab-backstage-configs
        branchName: add-${{ parameters.environment }}-${{ parameters.clusterType }}-${{ parameters.name }}-infra
        title: 'Add ${{ parameters.clusterVariant }} EKS cluster: ${{ parameters.name }}'
        description: |
          ## New EKS Cluster Infrastructure
          
          - **Cluster Name**: ${{ parameters.name }}
          - **Environment**: ${{ parameters.environment }}
          - **Cluster Type**: ${{ parameters.clusterType }}
          - **Variant**: ${{ parameters.clusterVariant }}
          - **Region**: ${{ parameters.region }}
          - **Node Count**: ${{ parameters.nodeCount }} (min: ${{ parameters.nodeMinSize }}, max: ${{ parameters.nodeMaxSize }})
          - **Node Size**: ${{ parameters.nodeSize }}
          - **Capacity Type**: ${{ parameters.capacityType }}
          
          ### Access Configuration
          {%- if parameters.adminAccessEntryName1 %}
          - **Admin Access**: ${{ parameters.adminAccessEntryName1 }} (${{ parameters.adminAccessEntryType1 }})
          {%- endif %}
          {%- if parameters.developerAccessEntryName1 %}
          - **Developer Access**: ${{ parameters.developerAccessEntryName1 }} (${{ parameters.developerAccessEntryType1 }})
          {%- endif %}
          {%- if parameters.readOnlyAccessEntryName1 %}
          - **ReadOnly Access**: ${{ parameters.readOnlyAccessEntryName1 }} (${{ parameters.readOnlyAccessEntryType1 }})
          {%- endif %}
          
          ### Components Created
          - Network composition (VPC, subnets, security groups)
          - RBAC composition (IAM roles and policies)
          - EKS cluster composition (cluster, node group, add-ons)
          - Access entries composition (IAM access entries)
          
          This PR adds new cluster infrastructure to `${{ parameters.environment }}/${{ parameters.clusterType }}/${{ parameters.name }}/infra/crossplane/`
          
          The cluster will be managed by Crossplane and deployed via ArgoCD ApplicationSet.
        targetPath: ${{ parameters.environment }}/${{ parameters.clusterType }}/${{ parameters.name }}/infra/crossplane

    - id: wait-for-merge
      name: Wait for PR to be merged
      action: debug:wait
      input:
        seconds: 15

    - id: register
      name: Register in Catalog
      action: catalog:register
      input:
        catalogInfoUrl: https://github.com/SkylarHoughtonGithub/skylab-backstage-configs/blob/main/${{ parameters.environment }}/${{ parameters.clusterType }}/${{ parameters.name }}/infra/crossplane/catalog-info.yaml

    - id: completion-message
      name: Cluster Creation Complete
      action: debug:log
      input:
        message: |
          EKS Cluster Infrastructure Created!
          
          Pull Request: ${{ steps['publish-pr'].output.remoteUrl }}
          Cluster Path: ${{ parameters.environment }}/${{ parameters.clusterType }}/${{ parameters.name }}/infra/crossplane
          
          Components Created:
          - ${{ parameters.name }}-network (VPC, subnets, routing)
          - ${{ parameters.name }}-rbac (IAM roles and policies)
          - ${{ parameters.name }}-cluster (EKS cluster and node group)
          - ${{ parameters.name }}-access (Access entries)
          
          Next Steps:
          1. Review and merge the pull request
          2. Verify the cluster appears in your Backstage catalog
          3. Monitor ArgoCD for sync status
          4. Check Crossplane for cluster provisioning status

  output:
    links:
      - title: Pull Request
        url: ${{ steps['publish-pr'].output.remoteUrl }}
        icon: github
      - title: Repository
        url: https://github.com/SkylarHoughtonGithub/skylab-backstage-configs
        icon: catalog
      - title: ArgoCD 
        url: https://argocd.skylarhoughtongithub.local
        icon: dashboard
    text:
      - title: Cluster Path
        content: ${{ parameters.environment }}/${{ parameters.clusterType }}/${{ parameters.name }}/infra/crossplane
      - title: Branch Name
        content: add-${{ parameters.environment }}-${{ parameters.clusterType }}-${{ parameters.name }}-infra
      - title: Expected Application Name
        content: cluster-name-crossplane-infra-${{ parameters.environment }}
      - title: Components
        content: Network, RBAC, Cluster, AccessEntries